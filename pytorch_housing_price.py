# -*- coding: utf-8 -*-
"""pytorch_housing_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FqPactXuTTgJZkRASrAagzmr-IHGGnSe
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

!pip install kmeans-pytorch

from kmeans_pytorch import kmeans, kmeans_predict
import torch.utils.data as data_utils

from google.colab import files
uploaded = files.upload()

import io
data = pd.read_csv(io.StringIO(uploaded['housing-price.csv'].decode('utf-8')))

target_df = data[['median_house_value']]
data = data[['longitude', 'latitude', 'median_income']]

df_tensor = torch.tensor(data.to_numpy())
#target_df = torch.tensor(target_df.to_numpy())

df_tensor

class house_dataset(data_utils.Dataset):
    def __init__(self, X_data, y_data):
        self.X_data = X_data
        self.y_data = y_data
        
    def __getitem__(self, index):
        return self.X_data[index], self.y_data[index]
        
    def __len__ (self):
        return len(self.X_data)
    
    def __float__(self):
        return 0.0

dataset = house_dataset(df_tensor, target_df)
dataset[0:5]

if torch.cuda.is_available():
    device = torch.device('cuda:0')
else:
    device = torch.device('cpu')

num_clusters = 3
cluster_ids_x, cluster_centers = kmeans(
    X=df_tensor, num_clusters=num_clusters, distance='euclidean', device=device
)

print(cluster_ids_x)
print(cluster_centers)

y = df_tensor
y

cluster_ids_y = kmeans_predict(
    y, cluster_centers, 'euclidean', device=device
)

print(cluster_ids_y)

import seaborn as sns

# Visualising the clusters - On the first two columns
sns.set_style("darkgrid")
plt.figure(figsize = (16,8))
plt.scatter(df_tensor[cluster_ids_y == 0, 0], df_tensor[cluster_ids_y == 0, 1], 
            s = 100, c = 'red', label = 'setosa')
plt.scatter(df_tensor[cluster_ids_y == 1, 0], df_tensor[cluster_ids_y == 1, 1], 
            s = 100, c = 'blue', label = 'versicolour')
plt.scatter(df_tensor[cluster_ids_y == 2, 0], df_tensor[cluster_ids_y == 2, 1],
            s = 100, c = 'green', label = 'Iris-virginica')

# Plotting the centroids of the clusters
plt.scatter(cluster_centers[:, 0], cluster_centers[:,1], 
            s = 100, c = 'yellow', label = 'Centroids')

plt.legend()